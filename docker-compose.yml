# docker-compose.yml
name: naserpapidev

services:
  app:
    image: ghcr.io/${GHCR_OWNER}/naserpapidev:${IMAGE_TAG:-latest}
    pull_policy: always
    restart: unless-stopped

    # The workflow copies .env.deploy to the server and then generates a merged .env.
    # We load that here so both runtime and Caddy vars are available.
    env_file:
      - .env

    environment:
      NODE_ENV: production
      PORT: 3000

    # No host port; Caddy will reverse-proxy to "app:3000"
    expose:
      - "3000"

    # Healthcheck OPTION A (requires curl in your app image; see Dockerfile tip below)
    healthcheck:
      test: [ "CMD-SHELL", "curl -sf http://localhost:3000/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

    # If you don't install curl in the image, comment OPTION A above and use OPTION B:
    # healthcheck:
    #   test:
    #     [
    #       "CMD-SHELL",
    #       "node -e 'require(\"http\").get(\"http://localhost:3000\",r=>process.exit((r.statusCode>=200&&r.statusCode<500)?0:1)).on(\"error\",()=>process.exit(1))'"
    #     ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

    networks: [ web ]

  caddy:
    image: caddy:2
    restart: unless-stopped

    depends_on:
      app:
        condition: service_healthy

    # Public ports
    ports:
      - "80:80"
      - "443:443"

    # Caddyfile reads {$DOMAIN} and {$EMAIL}; we pass them via env (from .env)
    environment:
      DOMAIN: ${DOMAIN}
      EMAIL: ${EMAIL}

    volumes:
      - ./ops/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config

    networks: [ web ]

volumes:
  caddy_data:
  caddy_config:

networks:
  web: { }
