name: Build & Deploy (GHCR â†’ VPS)

on:
  push:
    branches: [ "main" ]
    tags: [ "v*", "release-*" ]
  workflow_dispatch:

# Avoid overlapping deploys on main
concurrency:
  group: deploy-main
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/naserpapidev
  DOCKER_BUILDKIT: 1

jobs:
  build-and-push:
    name: Build & Push to GHCR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set image tag
        id: meta
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "branch" && "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "tag=edge" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "tag=sha-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build-and-push
    # deploy only when pushing to main (tags are handled by build, but skip auto-deploy)
    if: github.ref_type == 'branch' && github.ref_name == 'main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine tag for deploy
        id: meta
        run: |
          echo "tag=edge" >> $GITHUB_OUTPUT

      - name: Show workspace files (debug)
        run: |
          pwd
          ls -la
          echo "---- find (maxdepth 3) ----"
          find . -maxdepth 3 -type f -print

      - name: Ensure deploy dir exists?
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            mkdir -p "${{ secrets.DEPLOY_PATH }}"

      - name: Show workspace files (debug)
        run: |
          pwd
          ls -la
          echo "---- find (maxdepth 3) ----"
          find . -maxdepth 3 -type f -print

      - name: Copy compose files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: |
            ./docker-compose.yml
            ./ops/caddy/Caddyfile
            ./.env.deploy
          target: ${{ secrets.DEPLOY_PATH }}/
          overwrite: true
          debug: true

      - name: Deploy via SSH (pull & up -d)
        uses: appleboy/ssh-action@v1.2.1
        env:
          GHCR_OWNER: ${{ secrets.GHCR_OWNER }}
          IMAGE_TAG: ${{ steps.meta.outputs.tag }}
          DOMAIN: ${{ secrets.DOMAIN }}
          EMAIL: ${{ secrets.EMAIL }}
          GHCR_READ_TOKEN: ${{ secrets.GHCR_READ_TOKEN }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            set -euo pipefail
            cd "${{ secrets.DEPLOY_PATH }}"

            # Create/refresh server-side .env for docker compose
            cat > .env <<EOF
            GHCR_OWNER=${GHCR_OWNER}
            IMAGE_TAG=${IMAGE_TAG}
            DOMAIN=${DOMAIN}
            EMAIL=${EMAIL}
            EOF
            echo "Wrote $(pwd)/.env:"
            cat .env

            # Optional: login to GHCR if your image is private
            if [ -n "${GHCR_READ_TOKEN:-}" ]; then
              echo "${GHCR_READ_TOKEN}" | docker login ghcr.io -u "${GHCR_OWNER}" --password-stdin
            fi

            # Pull & restart
            docker compose pull
            docker compose up -d --remove-orphans

            # Basic health check
            docker compose ps
            sleep 3
            docker compose logs --no-log-prefix --since=2m app || true
            docker compose logs --no-log-prefix --since=2m caddy || true
