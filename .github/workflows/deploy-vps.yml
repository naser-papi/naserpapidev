name: Build & Push Docker image (GHCR)

on:
  push:
    branches: [ "main" ]
    tags: [ "v*", "release-*" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/naserpapidev
  DOCKER_BUILDKIT: 1

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: meta
        run: |
          # derive a tag: main -> edge, tag refs -> same, else short sha
          if [[ "${GITHUB_REF_TYPE}" == "branch" && "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "tag=edge" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "tag=sha-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref_type == 'branch' && github.ref_name == 'main' # deploy only from main
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set image tag
        id: meta
        run: |
          # mirror the logic used in build job
          if [[ "${GITHUB_REF_TYPE}" == "branch" && "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "tag=edge" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "tag=sha-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi      

      - name: Copy compose files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: |
            docker-compose.yml
            ops/caddy/Caddyfile
            .env.deploy
          target: ${{ secrets.DEPLOY_PATH }}/


      - name: Run remote deploy commands
        uses: appleboy/ssh-action@v1.2.1
        env:
          GHCR_OWNER: ${{ secrets.GHCR_OWNER }}
          IMAGE_TAG: ${{ steps.meta.outputs.tag }}
          DOMAIN: ${{ secrets.DOMAIN }}
          EMAIL: ${{ secrets.EMAIL }}
          GHCR_READ_TOKEN: ${{ secrets.GHCR_READ_TOKEN }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            set -euo pipefail
            mkdir -p "$DEPLOY_PATH"
            cd "$DEPLOY_PATH"

            # First-time Docker/Compose install guard (idempotent)
            if ! command -v docker >/dev/null 2>&1; then
              echo "Docker not found. Please install Docker & docker compose plugin first."
              exit 1
            fi

            # Create/refresh .env file for compose (server-specific)
            cat > .env <<EOF
            GHCR_OWNER=${GHCR_OWNER}
            IMAGE_TAG=${IMAGE_TAG}
            DOMAIN=${DOMAIN}
            EMAIL=${EMAIL}
            EOF

            # If GHCR is private, login (skipped if token is empty)
            if [ -n "${GHCR_READ_TOKEN:-}" ]; then
              echo "${GHCR_READ_TOKEN}" | docker login ghcr.io -u "${GHCR_OWNER}" --password-stdin
            fi

            # Pull & restart
            docker compose pull
            docker compose up -d --remove-orphans

            # Optional: open firewall (Ubuntu ufw)
            if command -v ufw >/dev/null 2>&1; then
              sudo ufw allow 80/tcp || true
              sudo ufw allow 443/tcp || true
            fi

